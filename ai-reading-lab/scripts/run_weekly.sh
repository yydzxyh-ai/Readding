#!/usr/bin/env bash

# AI Reading Lab - Weekly Processing Script
# Usage: ./scripts/run_weekly.sh [--verbose] [--no-commit]
# For cron: 0 12 * * 1 /path/to/ai-reading-lab/scripts/run_weekly.sh

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
LOG_FILE="$PROJECT_DIR/logs/weekly_$(date +%Y%m%d_%H%M%S).log"

# Parse arguments
VERBOSE=false
NO_COMMIT=false

while [[ $# -gt 0 ]]; do
  case $1 in
    --verbose)
      VERBOSE=true
      shift
      ;;
    --no-commit)
      NO_COMMIT=true
      shift
      ;;
    -h|--help)
      echo "Usage: $0 [--verbose] [--no-commit]"
      echo "  --verbose    Enable verbose output"
      echo "  --no-commit  Skip git commit and push"
      echo "  -h, --help   Show this help message"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Setup logging
mkdir -p "$(dirname "$LOG_FILE")"
exec > >(tee -a "$LOG_FILE") 2>&1

echo "=========================================="
echo "AI Reading Lab - Weekly Processing"
echo "Started: $(date)"
echo "Project: $PROJECT_DIR"
echo "Log: $LOG_FILE"
echo "=========================================="

# Change to project directory
cd "$PROJECT_DIR"

# Check environment
if [ -z "$OPENAI_API_KEY" ]; then
    echo "‚ö†Ô∏è  Warning: OPENAI_API_KEY not set"
    echo "   Set it with: export OPENAI_API_KEY=sk-..."
fi

# Create necessary directories
mkdir -p data extracts summaries/json logs

# Function for verbose output
log() {
    if [ "$VERBOSE" = true ]; then
        echo "[$(date '+%H:%M:%S')] $1"
    else
        echo "$1"
    fi
}

# Step 1: Quality checks
log "üîç Running quality checks..."
if command -v python3 &> /dev/null; then
    python3 -c "
from ai_lab.utils import calculate_coverage_metrics, evaluate_summary_quality
print('‚úì Quality metrics functions available')
" || echo "‚ö†Ô∏è  Quality check warning (continuing...)"
else
    echo "‚ö†Ô∏è  Python3 not found, skipping quality checks"
fi

# Step 2: Ingest documents
log "üìÑ Step 1: Ingesting documents..."
if [ -d "data" ] && [ -n "$(find data -name '*.pdf' -o -name '*.md' -o -name '*.txt' 2>/dev/null)" ]; then
    if command -v python3 &> /dev/null; then
        python3 -m ai_lab.ingest --glob "data/**/*.pdf" --out data/extracts || {
            echo "‚ö†Ô∏è  Ingest step completed with warnings"
        }
    else
        echo "‚ùå Python3 not found, cannot run ingest"
        exit 1
    fi
else
    echo "‚ö†Ô∏è  No documents found in data/ directory"
    echo '{"title": "No Documents", "tl_dr": "No documents were found to process this week.", "contributions": [], "methods": [], "results": [], "limitations": [], "tags": ["placeholder"], "source_path": "none"}' > summaries/json/placeholder.json
fi

# Step 3: Generate summaries
log "ü§ñ Step 2: Generating summaries..."
if command -v python3 &> /dev/null; then
    if [ "$VERBOSE" = true ]; then
        python3 -m ai_lab.summarize --glob "data/extracts/*.txt" --out summaries/json --verbose || {
            echo "‚ö†Ô∏è  Summarize step completed with warnings"
        }
    else
        python3 -m ai_lab.summarize --glob "data/extracts/*.txt" --out summaries/json || {
            echo "‚ö†Ô∏è  Summarize step completed with warnings"
        }
    fi
else
    echo "‚ùå Python3 not found, cannot run summarize"
    exit 1
fi

# Step 4: Create weekly digest
log "üìä Step 3: Creating weekly digest..."
if command -v python3 &> /dev/null; then
    if [ "$VERBOSE" = true ]; then
        python3 -m ai_lab.aggregate --json_glob "summaries/json/*.json" --out summaries/WEEKLY_DIGEST.md --verbose
    else
        python3 -m ai_lab.aggregate --json_glob "summaries/json/*.json" --out summaries/WEEKLY_DIGEST.md
    fi
else
    echo "‚ùå Python3 not found, cannot run aggregate"
    exit 1
fi

# Step 5: Git commit and push (if enabled)
if [ "$NO_COMMIT" = false ]; then
    log "üìù Step 4: Committing changes..."
    
    # Check if git is available and we're in a git repository
    if command -v git &> /dev/null && git rev-parse --git-dir > /dev/null 2>&1; then
        # Check if there are changes to commit
        if ! git diff --quiet; then
            git add summaries/ logs/ || true
            git commit -m "ü§ñ Weekly digest update - $(date +'%Y-%m-%d %H:%M')

- Processed documents from data/ directory
- Generated JSON summaries in summaries/json/
- Created weekly digest: summaries/WEEKLY_DIGEST.md
- Log file: $(basename "$LOG_FILE")

Generated by local weekly script" || {
                echo "‚ö†Ô∏è  Git commit failed (continuing...)"
            }
            
            # Try to push (may fail if no remote or no write access)
            git push || {
                echo "‚ö†Ô∏è  Git push failed (continuing...)"
            }
            
            echo "‚úì Changes committed and pushed"
        else
            echo "‚ÑπÔ∏è  No changes to commit"
        fi
    else
        echo "‚ö†Ô∏è  Git not available or not in a git repository"
    fi
else
    log "‚è≠Ô∏è  Skipping git commit (--no-commit flag)"
fi

# Final summary
echo "=========================================="
echo "‚úÖ Weekly processing completed successfully!"
echo "Finished: $(date)"
echo "Log file: $LOG_FILE"

if [ -f "summaries/WEEKLY_DIGEST.md" ]; then
    echo "üìÑ Weekly digest: summaries/WEEKLY_DIGEST.md"
    if [ "$VERBOSE" = true ]; then
        echo "Preview:"
        head -5 summaries/WEEKLY_DIGEST.md
    fi
else
    echo "‚ö†Ô∏è  No weekly digest generated"
fi

echo "=========================================="
